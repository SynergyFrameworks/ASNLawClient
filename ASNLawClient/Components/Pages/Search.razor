@page "/search"
@using ASNLawClient.Client.Models
@using ASNLawClient.Client.Services
@using ASNLawClient.Client.Helpers
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="search-page">
    <h1>Search Law Documents</h1>

    <div class="search-container mb-4">
        <div class="search-input-container">
            <input type="text" @bind="_query" @bind:event="oninput"
                   @onkeydown="HandleKeyDown" placeholder="Search Law documents..." />
            <button class="search-button" @onclick="PerformSearchAsync">
                <span class="oi oi-magnifying-glass"></span>
            </button>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_query))
    {
        <div class="filter-container">
            <div class="filter-panel">
                <div class="filter-section">
                    <h4>Jurisdictions</h4>
                    <div class="jurisdiction-list">
                        @foreach (var jurisdiction in _availableJurisdictions)
                        {
                            <div class="checkbox-item">
                                <input type="checkbox" id="jurisdiction-@jurisdiction.ToLower()"
                                       checked="@IsJurisdictionSelected(jurisdiction)"
                                       @onchange="e => ToggleJurisdiction(jurisdiction, e.Value)" />
                                <label for="jurisdiction-@jurisdiction.ToLower()">@jurisdiction</label>
                            </div>
                        }
                    </div>
                </div>

                <div class="filter-section">
                    <h4>Date Range</h4>
                    <div class="date-filters">
                        <div class="date-field">
                            <label>From</label>
                            <input type="date" @bind="_fromDate" />
                        </div>
                        <div class="date-field">
                            <label>To</label>
                            <input type="date" @bind="_toDate" />
                        </div>
                    </div>
                </div>

                <button class="reset-button" @onclick="ResetFilters">Reset Filters</button>
            </div>
        </div>

        @if (_isLoading)
        {
            <div class="loading-indicator">
                <div class="spinner"></div>
                <span>Searching...</span>
            </div>
        }
        else
        {
            <div class="search-results-container">
                @if (!_searchResults.Any())
                {
                    <div class="no-results">
                        <p>No results found. Try adjusting your search terms or filters.</p>
                    </div>
                }
                else
                {
                    <div class="results-count">
                        Found @_searchResults.Count results for "@_query"
                    </div>

                    <div class="results-list">
                        @foreach (var result in GetPagedResults())
                        {
                            <div class="result-item" @onclick="() => NavigateToDocument(result.Id, result.MatchedPages.FirstOrDefault())">
                                <h3 class="result-title">@result.Title</h3>
                                <div class="result-metadata">
                                    <span class="jurisdiction">@result.Jurisdiction</span>
                                    <span class="document-type">@result.DocumentType</span>
                                    <span class="date">@result.PublishedDate.ToString("MMM d, yyyy")</span>
                                </div>
                                <div class="result-text">
                                    @((MarkupString)result.Snippet)
                                </div>

                                @if (result.MatchedPages.Any())
                                {
                                    <div class="matched-pages">
                                        <span>Matches on pages: </span>
                                        @foreach (var pageNumber in result.MatchedPages.Take(5))
                                        {
                                            <span class="page-badge" @onclick:stopPropagation="true"
                                                  @onclick="() => NavigateToDocument(result.Id, pageNumber)">
                                                @pageNumber
                                            </span>
                                        }
                                        @if (result.MatchedPages.Count > 5)
                                        {
                                            <span>and @(result.MatchedPages.Count - 5) more</span>
                                        }
                                    </div>
                                }

                                @if (result.Tags.Any())
                                {
                                    <div class="result-tags">
                                        @foreach (var tag in result.Tags)
                                        {
                                            <span class="tag">@tag</span>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <div class="pagination">
                        <button class="page-button" @onclick="() => ChangePage(_currentPage - 1)"
                                disabled="@(_currentPage <= 1)">
                            Previous
                        </button>

                        @for (int i = GetPaginationStart(); i <= GetPaginationEnd(); i++)
                        {
                            var pageNumber = i;
                            <button class="page-button @(pageNumber == _currentPage ? "active" : "")"
                                    @onclick="() => ChangePage(pageNumber)">
                                @pageNumber
                            </button>
                        }

                        <button class="page-button" @onclick="() => ChangePage(_currentPage + 1)"
                                disabled="@(_currentPage >= TotalPages)">
                            Next
                        </button>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <div class="search-instructions">
            <p>Enter a search term above to begin searching Law documents.</p>
        </div>
    }
</div>

@code {
    private string _query = string.Empty;
    private List<SearchResult> _searchResults = new();
    private bool _isLoading = false;
    private int _currentPage = 1;
    private int _pageSize = 10;

    // Filter state
    private List<string> _selectedJurisdictions = new();
    private List<string> _availableJurisdictions = new() { "Federal", "California", "New York", "Texas", "Florida" };
    private DateTime? _fromDate = null;
    private DateTime? _toDate = null;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (QueryHelpers.TryGetValue(queryParams, "q", out var queryValue))
        {
            _query = queryValue;
            await PerformSearchAsync();
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            PerformSearchAsync();
    }

    private async Task PerformSearchAsync()
    {
        if (string.IsNullOrWhiteSpace(_query))
            return;

        _isLoading = true;
        StateHasChanged();

        try
        {
            // Build filter options
            var filters = new FilterOptions
                {
                    Jurisdiction = string.Join(",", _selectedJurisdictions),
                    DateRange = GetDateRangeString()
                };

            _searchResults = await ApiClient.SearchAsync(_query, filters);

            // Update URL with search query
            NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(_query)}", false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching: {ex.Message}");
            _searchResults = new List<SearchResult>();
        }
        finally
        {
            _isLoading = false;
            _currentPage = 1;
            StateHasChanged();
        }
    }

    private bool IsJurisdictionSelected(string jurisdiction)
    {
        return _selectedJurisdictions.Contains(jurisdiction) || !_selectedJurisdictions.Any();
    }

    private void ToggleJurisdiction(string jurisdiction, object? isChecked)
    {
        bool selected = isChecked != null && (bool)isChecked;

        if (selected && !_selectedJurisdictions.Contains(jurisdiction))
        {
            _selectedJurisdictions.Add(jurisdiction);
        }
        else if (!selected && _selectedJurisdictions.Contains(jurisdiction))
        {
            _selectedJurisdictions.Remove(jurisdiction);
        }

        // When no filters are active, we show all jurisdictions
        if (!_selectedJurisdictions.Any())
        {
            // Apply all jurisdictions, but keep list empty for "all" behavior
        }

        PerformSearchAsync();
    }

    private void ResetFilters()
    {
        _selectedJurisdictions.Clear();
        _fromDate = null;
        _toDate = null;
        PerformSearchAsync();
    }

    private string GetDateRangeString()
    {
        if (_fromDate == null && _toDate == null)
            return string.Empty;

        if (_fromDate != null && _toDate != null)
            return $"{_fromDate:yyyy-MM-dd}:{_toDate:yyyy-MM-dd}";

        if (_fromDate != null)
            return $"{_fromDate:yyyy-MM-dd}:";

        return $":{_toDate:yyyy-MM-dd}";
    }

    private List<SearchResult> GetPagedResults()
    {
        return _searchResults
            .Skip((_currentPage - 1) * _pageSize)
            .Take(_pageSize)
            .ToList();
    }

    private int TotalPages => (int)Math.Ceiling(_searchResults.Count / (double)_pageSize);

    private int GetPaginationStart()
    {
        // Show at most 5 page numbers, centered on the current page if possible
        var start = Math.Max(1, _currentPage - 2);
        var end = Math.Min(start + 4, TotalPages);

        // Adjust start if we're near the end to ensure we show 5 pages when possible
        start = Math.Max(1, end - 4);

        return start;
    }

    private int GetPaginationEnd()
    {
        var start = GetPaginationStart();
        return Math.Min(start + 4, TotalPages);
    }

    private void ChangePage(int page)
    {
        if (page < 1 || page > TotalPages || page == _currentPage)
            return;

        _currentPage = page;
        StateHasChanged();
    }

    private void NavigateToDocument(string documentId, int page = 1)
    {
        NavigationManager.NavigateTo($"/document/{documentId}?page={page}");
    }
}